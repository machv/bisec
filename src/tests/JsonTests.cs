using BiSec.Library;
using BiSec.Library.Models;
using System;
using Xunit;

namespace tests
{
    public class JsonTests
    {
        [Fact]
        public void GetUsersResponse()
        {
            string message
            byte[] messageBytes = StringHelper.HexStringToByteArray(message);
            
            var tc = Package.Load(messageBytes);

            string json = tc.Message.Payload.TextContent;

            var users = GatewayClient.ParseJsonResponse<User[]>(json);

            Assert.Equal(Command.Jmcp, tc.Message.Command);
            Assert.Equal(3, users.Length);
        }

        [Fact]
        public void GetValuesResponse()
        {
            string message
            //byte[] messageBytes = StringTools.HexStringToByteArray();

            var tc = Package.Load(message.ToByteArray());
            string json = tc.Message.Payload.TextContent;

            var values = GatewayClient.ParseJsonResponse<System.Collections.Generic.Dictionary<string, int>>(json);

            Assert.Equal(64, values.Count);
        }
    }
}
